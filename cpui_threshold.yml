# ---
# - name: check CPU Utilization
#   hosts: localhost
#   gather_facts: no

#   tasks:
#     - name: Get CPU Utilization
#       shell: top -bn1 | grep "Cpu(s)" | sed "s/.*, *\([0-9.]*\)%* id.*/\1/" | awk '{print 100 - $1"%"}'
#       register: cpu_utilization

#     - name: Display CPU Utilization
#       debug:
#         msg: "cpu utilization is {{ cpu_utilization.stdout }}"
---
- name: check cpu utilization
  hosts: localhost
  gather_facts: yes
  vars_files:
    - Vars/global.yml 

  tasks:
    - name: setting up flag
      set_fact:
         job_output: ""

    - name: get cpu utilization
      shell: top -bn1 | grep "Cpu(s)" | sed "s/.*, *\([0-9.]*\)%* id.*/\1/" | awk '{print 100 - $1"%"}'
      register: cpu_utilization


    - name: Print cpu usage current value 1st time
      debug: 
        msg: " Cpu Utilization is {{ cpu_utilization.stdout}}"

    - name: current value
      set_fact:
         cpu_value1: "{{cpu_utilization.stdout.split('%')[0]}}"
###Comparing the cpu with threshhold value
    - name: comapre cpu utilization against threshold
      set_fact: 
        job_output: "Cpu value is under thrishhold value {{cpu_threshold}}"
      when: cpu_value1 | int <= cpu_threshold

    - name: comapre cpu utilization against threshold
      set_fact: 
        job_output: "Cpu value is greater thrishhold value {{cpu_threshold}}"
      when: cpu_value1| int > cpu_threshold

    - name: wait for 20 second if cpu utilization exceeds threshold
      pause:
        seconds: 10
      when: cpu_value1| int > cpu_threshold

    - name: get cpu utilization 2nd time after wait
      shell: top -bn1 | grep "Cpu(s)" | sed "s/.*, *\([0-9.]*\)%* id.*/\1/" | awk '{print 100 - $1"%"}'
      register: cpu_utilization2

    - name: Print cpu usage current value 2st time
      debug: 
        msg: " Cpu Utilization is {{ cpu_utilization2.stdout}}"

    - name: current value 2nd time
      set_fact:
         cpu_value2: "{{cpu_utilization2.stdout.split('%')[0]}}"

    - name: comapre cpu utilization against threshold 2nd time
      set_fact: 
        job_output: "Cpu value is under thrishhold value {{cpu_threshold}}"
      when: cpu_value2 | int <= cpu_threshold

    - name: comapre cpu utilization against threshold
      set_fact: 
        job_output: "Cpu value is greater thrishhold value {{cpu_threshold}}"
      when: cpu_value2| int > cpu_threshold
    - name: checking top 5 process
      set_facts:
        shell: ps -eo pid,ppid,cmd,%cpu | head -n 6
        register: top_five_process
        debug:
          msg: "these are the top 5 process {{top_five_process.stdout_lines}}"
      
      

###In second iteration if cpu is above th value get top 5 high cpu process and print it

    # - name: display result
    #   debug:
    #     msg: "CPU Utilization is {{ cpu_utilization.stdout }}. {{ 'Over Threshold' if threshold_exceeded else 'Under Threshold' }}"
